<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/VS/Menu.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/VS/Colors.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/VS/Styles.xaml"/>
        <ResourceDictionary Source="pack://application:,,,/MahApps.Metro;component/Styles/Controls.ContextMenu.xaml"/>
    </ResourceDictionary.MergedDictionaries>
    <SolidColorBrush x:Key="SubmenuItemBackground" Color="#1d1d20"/>
    <SolidColorBrush x:Key="MenuItemHighlightedBackground" Color="{DynamicResource AccentColor2}"/>
    <SolidColorBrush x:Key="SubmenuItemBackgroundHighlighted" Color="{DynamicResource AccentColor2}"/>
    <SolidColorBrush x:Key="MenuSeparatorBorderBrush" Color="{DynamicResource AccentColor}"/>
    <SolidColorBrush x:Key="BackgroundSelected" Color="{DynamicResource AuroraGoldColor}"/>
    <Style x:Key="{x:Static MenuItem.SeparatorStyleKey}" TargetType="{x:Type Separator}">
        <Setter Property="FrameworkElement.Height" Value="1"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Separator}">
                    <Border Margin="25 0 0 0" BorderBrush="{DynamicResource MenuSeparatorBorderBrush}" BorderThickness="1"/>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="StandardMenu" TargetType="{x:Type Menu}">
        <Setter Property="Control.Background" Value="{DynamicResource LightBackground}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource Foreground}"/>
    </Style>
    <Style x:Key="StandardMenuItem" TargetType="{x:Type MenuItem}">
        <Setter Property="Control.Foreground"
            Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Menu}}}"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type MenuItem}">
                    <Border x:Name="Border" Background="Transparent" BorderBrush="Transparent" BorderThickness="1"
                  SnapsToDevicePixels="true">
                        <Grid x:Name="Grid">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition x:Name="Col0" MinWidth="20" SharedSizeGroup="MenuItemIconColumnGroup"/>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuTextColumnGroup"/>
                                <ColumnDefinition Width="Auto" SharedSizeGroup="MenuItemIGTColumnGroup"/>
                                <ColumnDefinition x:Name="Col3" Width="14"/>
                            </Grid.ColumnDefinitions>
                            <ContentPresenter x:Name="Icon" Grid.Column="0" VerticalAlignment="Center" HorizontalAlignment="Center"
                                ContentSource="Icon"/>
                            <Grid x:Name="CheckMarkPanel" Column="0" Margin="0,0,0,0" VerticalAlignment="Center"
                    HorizontalAlignment="Center" Background="#151516" Width="16" Height="16" Visibility="Collapsed">
                                <TextBlock x:Name="CheckMarkPath" VerticalAlignment="Center" HorizontalAlignment="Center" Margin="0"
                           ToolTip="Enabled" Visibility="Hidden" Style="{StaticResource FieldHeaderCheckTextBlockStyle}"
                           Foreground="{DynamicResource AuroraGoldColorBrush}"/>
                            </Grid>
                            <ContentPresenter x:Name="HeaderHost" Grid.Column="1" Margin="{TemplateBinding Control.Padding}"
                                VerticalAlignment="Center" ContentSource="Header" RecognizesAccessKey="true"/>
                            <ContentPresenter x:Name="IGTHost" Grid.Column="2" Margin="38 1 8 1" VerticalAlignment="Center"
                                ContentSource="InputGestureText"/>
                            <Grid x:Name="ArrowPanel" Column="3" Margin="4 0 6 0" VerticalAlignment="Center">
                                <Path x:Name="ArrowPanelPath" HorizontalAlignment="Right" VerticalAlignment="Center"
                      Data="M 0,0 L 0,8 4,4 Z" Fill="{TemplateBinding Control.Foreground}"/>
                            </Grid>
                            <Popup x:Name="SubMenuPopup" AllowsTransparency="true" Focusable="false" HorizontalOffset="-1"
                     Placement="Right"
                     PopupAnimation="{DynamicResource {x:Static SystemParameters.MenuPopupAnimationKey}}"
                     IsOpen="{Binding Path=IsSubmenuOpen, RelativeSource={RelativeSource TemplatedParent}}">
                                <Grid Margin="0 0 5 5">
                                    <Border x:Name="SubMenuBorder" Background="{DynamicResource SubmenuItemBackground}"
                          BorderBrush="{DynamicResource MenuSeparatorBorderBrush}" BorderThickness="1"
                          SnapsToDevicePixels="true">
                                        <Grid x:Name="SubMenu" Margin="2" IsSharedSizeScope="true">
                                            <StackPanel IsItemsHost="true" KeyboardNavigation.DirectionalNavigation="Cycle"/>
                                        </Grid>
                                        <UIElement.Effect>
                                            <DropShadowEffect ShadowDepth="2" Color="Black"/>
                                        </UIElement.Effect>
                                    </Border>
                                    <Border x:Name="TransitionBorder" Width="0" Height="2" Margin="1 0 0 0" HorizontalAlignment="Left"
                          VerticalAlignment="Top" Background="{DynamicResource SubmenuItemBackground}"
                          BorderBrush="{DynamicResource SubmenuItemBackground}" BorderThickness="1"
                          SnapsToDevicePixels="false"/>
                                </Grid>
                            </Popup>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="MenuItem.Role" Value="TopLevelHeader">
                            <Setter Property="Control.Padding" Value="6 2 6 2"/>
                            <Setter TargetName="ArrowPanel" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="Col0" Property="ColumnDefinition.MinWidth" Value="0"/>
                            <Setter TargetName="Col3" Property="ColumnDefinition.Width" Value="Auto"/>
                            <Setter TargetName="IGTHost" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="CheckMarkPanel" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="SubMenu" Property="FrameworkElement.Margin" Value="2 3 2 2"/>
                            <Setter TargetName="SubMenuBorder" Property="Border.BorderThickness" Value="1 1 1 1"/>
                            <Setter TargetName="SubMenuPopup" Property="Popup.Placement" Value="Bottom"/>
                            <Setter TargetName="TransitionBorder" Value="{Binding ActualWidth, ElementName=Grid}"
                      Property="FrameworkElement.Width"/>
                        </Trigger>
                        <Trigger Property="MenuItem.Role" Value="TopLevelItem">
                            <Setter Property="Control.Padding" Value="6 0 6 2"/>
                            <Setter TargetName="ArrowPanel" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="Col0" Property="ColumnDefinition.MinWidth" Value="0"/>
                            <Setter TargetName="Col3" Property="ColumnDefinition.Width" Value="Auto"/>
                            <Setter TargetName="IGTHost" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="CheckMarkPanel" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="MenuItem.Role" Value="SubmenuHeader">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Control.Padding" Value="10 3 0 3"/>
                            <Setter TargetName="Border" Value="{DynamicResource SubmenuItemBackground}" Property="Border.Background"/>
                            <Setter TargetName="Border" Property="FrameworkElement.MinHeight" Value="22"/>
                        </Trigger>
                        <Trigger Property="MenuItem.Role" Value="SubmenuItem">
                            <Setter Property="DockPanel.Dock" Value="Top"/>
                            <Setter Property="Control.Padding" Value="10 3 0 3"/>
                            <Setter TargetName="ArrowPanel" Property="UIElement.Visibility" Value="Collapsed"/>
                            <Setter TargetName="Border" Value="{DynamicResource SubmenuItemBackground}" Property="Border.Background"/>
                            <Setter TargetName="Border" Property="FrameworkElement.MinHeight" Value="22"/>
                            <Setter TargetName="CheckMarkPanel" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="MenuItem.IsHighlighted" Value="true"/>
                                <Condition Property="MenuItem.Role" Value="TopLevelHeader"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Value="{DynamicResource MenuItemHighlightedBackground}"
                      Property="Border.Background"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="MenuItem.IsHighlighted" Value="true"/>
                                <Condition Property="MenuItem.Role" Value="TopLevelItem"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Value="{DynamicResource MenuItemHighlightedBackground}"
                      Property="Border.Background"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="MenuItem.IsHighlighted" Value="true"/>
                                <Condition Property="MenuItem.Role" Value="SubmenuHeader"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Value="{DynamicResource SubmenuItemBackgroundHighlighted}"
                      Property="Border.Background"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="MenuItem.IsHighlighted" Value="true"/>
                                <Condition Property="MenuItem.Role" Value="SubmenuItem"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Value="{DynamicResource SubmenuItemBackgroundHighlighted}"
                      Property="Border.Background"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="MenuItem.IsSubmenuOpen" Value="true"/>
                                <Condition Property="MenuItem.Role" Value="TopLevelHeader"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="Border" Value="{DynamicResource SubmenuItemBackground}" Property="Border.Background"/>
                            <Setter TargetName="Border" Value="{DynamicResource MenuSeparatorBorderBrush}"
                      Property="Border.BorderBrush"/>
                            <Setter TargetName="Border" Property="Border.BorderThickness" Value="1 1 1 0"/>
                        </MultiTrigger>
                        <Trigger Property="MenuItem.IsSubmenuOpen" Value="true">
                            <Setter TargetName="ArrowPanelPath" Value="{DynamicResource BackgroundSelected}" Property="Shape.Fill"/>
                        </Trigger>
                        <Trigger Property="MenuItem.IsSuspendingPopupAnimation" Value="true">
                            <Setter TargetName="SubMenuPopup" Property="Popup.PopupAnimation" Value="None"/>
                        </Trigger>
                        <Trigger Value="{x:Null}" Property="MenuItem.Icon">
                            <Setter TargetName="Icon" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource MenuDisabledForeground}" Property="Control.Foreground"/>
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="MenuItem.IsChecked" Value="true"/>
                                <Condition Property="MenuItem.Role" Value="SubmenuItem"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="CheckMarkPath" Property="UIElement.Visibility" Value="Visible"/>
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="MenuItem.IsCheckable" Value="true"/>
                                <Condition Property="MenuItem.Role" Value="SubmenuItem"/>
                            </MultiTrigger.Conditions>
                            <Setter TargetName="CheckMarkPanel" Property="UIElement.Visibility" Value="Visible"/>
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="StandardContextMenu" TargetType="{x:Type ContextMenu}"
         BasedOn="{StaticResource MetroContextMenu}">
        <Setter Property="Control.Background" Value="{DynamicResource ContextMenuBackgroundBrush}"/>
        <Setter Property="Block.TextAlignment" Value="Left"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource ContextMenuBorderBrush}"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="Control.FontFamily" Value="{DynamicResource {x:Static SystemFonts.MenuFontFamilyKey}}"/>
        <Setter Property="Control.FontSize" Value="12"/>
        <Setter Property="Control.FontWeight" Value="Normal"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource GrayBrush5}"/>
        <Setter Property="Grid.IsSharedSizeScope" Value="true"/>
        <Setter Property="ContextMenu.HasDropShadow" Value="true"/>
        <Setter Property="Control.HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FrameworkElement.OverridesDefaultStyle" Value="true"/>
        <Setter Property="RenderOptions.ClearTypeHint" Value="Enabled"/>
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ContextMenu}">
                    <Grid>
                        <Rectangle x:Name="LayoutRoot" Fill="{TemplateBinding Control.Background}"/>
                        <Border x:Name="Border" Padding="{TemplateBinding Control.Padding}"
                    Background="{TemplateBinding Control.Background}"
                    BorderBrush="{TemplateBinding Control.BorderBrush}"
                    BorderThickness="{TemplateBinding Control.BorderThickness}"
                    SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}">
                            <ScrollViewer x:Name="SubMenuScrollViewer" CanContentScroll="true"
                            Style="{DynamicResource {ComponentResourceKey ResourceId=MenuScrollViewer, TypeInTargetAssembly={x:Type FrameworkElement}}}">
                                <ItemsPresenter x:Name="ItemsPresenter" Margin="0" Grid.IsSharedSizeScope="true"
                                KeyboardNavigation.DirectionalNavigation="Cycle" KeyboardNavigation.TabNavigation="Cycle"
                                SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                            </ScrollViewer>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ContextMenu.HasDropShadow" Value="true">
                            <Setter TargetName="Border" Property="FrameworkElement.Margin" Value="0 0 6 6"/>
                            <Setter TargetName="LayoutRoot" Property="UIElement.Effect">
                                <Setter.Value>
                                    <DropShadowEffect BlurRadius="4" Direction="315" Opacity="0.3" ShadowDepth="2"
                                    Color="{DynamicResource MenuShadowColor}"/>
                                </Setter.Value>
                            </Setter>
                            <Setter TargetName="LayoutRoot" Property="FrameworkElement.Margin" Value="0 0 6 6"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Setter Property="TextOptions.TextFormattingMode" Value="Ideal"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
    </Style>
    <Style x:Key="AuroraMenu" TargetType="{x:Type Menu}" BasedOn="{StaticResource StandardMenu}">
        <Setter Property="Control.Foreground" Value="{DynamicResource GrayBrush5}"/>
        <Setter Property="Control.FontSize" Value="12"/>
        <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    </Style>
    <Style x:Key="AuroraMenuItem" TargetType="{x:Type MenuItem}" BasedOn="{StaticResource StandardMenuItem}">
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    </Style>
    <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource AuroraMenuItem}"/>
    <Style TargetType="{x:Type Menu}" BasedOn="{StaticResource AuroraMenu}"/>
</ResourceDictionary>