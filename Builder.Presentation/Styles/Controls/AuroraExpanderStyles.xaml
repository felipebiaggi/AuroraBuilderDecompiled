<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:options="http://schemas.microsoft.com/winfx/2006/xaml/presentation/options"
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
                    xmlns:converters="clr-namespace:Builder.Presentation.Converters"
                    xmlns:mah="http://metro.mahapps.com/winfx/xaml/shared">
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    <mah:ToUpperConverter x:Key="ToUpperConverter"/>
    <converters:BooleanToSolidColorBrushConverter x:Key="BooleanToSolidColorBrushConverter"/>
    <Style x:Key="HeaderTextBlockStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
        <Setter Property="TextBlock.FontWeight" Value="SemiBold"/>
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource IdealForegroundColorBrush}"/>
        <Setter Property="TextBlock.Text" Value="{Binding Converter={StaticResource ToUpperConverter}}"/>
    </Style>
    <DataTemplate x:Key="ExpanderHeaderTemplate">
        <StackPanel Orientation="Horizontal">
            <TextBlock Margin="3,2,0,2" Style="{StaticResource HeaderTextBlockStyle}"/>
        </StackPanel>
    </DataTemplate>
    <Style x:Key="SelectedElementTextBlockStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
        <Setter Property="TextBlock.FontWeight" Value="SemiBold"/>
        <Setter Property="TextBlock.TextWrapping" Value="WrapWithOverflow"/>
        <Setter Property="TextBlock.Foreground" Value="{DynamicResource IdealForegroundColorBrush}"/>
    </Style>
    <ControlTemplate x:Key="AnimatedExpanderTemplate" TargetType="{x:Type ToggleButton}">
        <Grid HorizontalAlignment="Stretch" Height="20"
          Width="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem}, Path=ActualWidth}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" MinWidth="20"/>
                <ColumnDefinition Width="50*"/>
                <ColumnDefinition Width="1*"/>
            </Grid.ColumnDefinitions>
            <Rectangle Grid.ColumnSpan="3" Fill="Transparent" StrokeThickness="0"/>
            <Path x:Name="Arrow" Grid.Column="0" Fill="{DynamicResource WhiteBrush}" Width="10" Height="8" Margin="5"
            Stretch="Fill"
            Data="F1 M 37.8516,39.5833 L 52.1016,24.9375 52.1016,35.2292 37.8516,50.2708 23.6016,35.2292 23.6016,24.9375 37.8516,39.5833 Z"
            HorizontalAlignment="Center" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5">
                <UIElement.RenderTransform>
                    <RotateTransform Angle="0"/>
                </UIElement.RenderTransform>
            </Path>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <TriggerBase.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Arrow"
                               Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)" To="180"
                               Duration="0:0:0.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </TriggerBase.EnterActions>
                <TriggerBase.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Arrow"
                               Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)" To="0"
                               Duration="0:0:0.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </TriggerBase.ExitActions>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <ControlTemplate x:Key="LeftAnimatedExpanderTemplate" TargetType="{x:Type ToggleButton}">
        <Grid HorizontalAlignment="Stretch" Height="20"
          Width="{Binding RelativeSource={RelativeSource AncestorType=ListBoxItem}, Path=ActualWidth}">
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="Auto" MinWidth="20"/>
                <ColumnDefinition Width="50*"/>
                <ColumnDefinition Width="1*"/>
            </Grid.ColumnDefinitions>
            <Rectangle Grid.ColumnSpan="3" Fill="Transparent" StrokeThickness="0"/>
            <Path x:Name="Arrow" Grid.Column="0" Fill="{DynamicResource WhiteBrush}" Width="10" Height="8"
            Margin="5,5,0,5" Stretch="Fill"
            Data="F1 M 37.8516,39.5833 L 52.1016,24.9375 52.1016,35.2292 37.8516,50.2708 23.6016,35.2292 23.6016,24.9375 37.8516,39.5833 Z"
            HorizontalAlignment="Center" VerticalAlignment="Center" RenderTransformOrigin="0.5,0.5">
                <UIElement.RenderTransform>
                    <RotateTransform Angle="0"/>
                </UIElement.RenderTransform>
            </Path>
        </Grid>
        <ControlTemplate.Triggers>
            <Trigger Property="ToggleButton.IsChecked" Value="True">
                <TriggerBase.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Arrow"
                               Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)" To="-90"
                               Duration="0:0:0.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </TriggerBase.EnterActions>
                <TriggerBase.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimation Storyboard.TargetName="Arrow"
                               Storyboard.TargetProperty="(Path.RenderTransform).(RotateTransform.Angle)" To="0"
                               Duration="0:0:0.2"/>
                        </Storyboard>
                    </BeginStoryboard>
                </TriggerBase.ExitActions>
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>
    <Style x:Key="AuroraExpanderStyle" TargetType="{x:Type Expander}">
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Expander}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto"/>
                            <RowDefinition x:Name="ContentRow" Height="0"/>
                        </Grid.RowDefinitions>
                        <Border Name="Border" Background="{DynamicResource HighlightBrush}"
                    BorderBrush="{StaticResource AccentColorBrush}" BorderThickness="0,0,0,0" CornerRadius="0"
                    Grid.Row="0">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="Auto"/>
                                    <ColumnDefinition Width="Auto"/>
                                </Grid.ColumnDefinitions>
                                <ToggleButton Template="{StaticResource LeftAnimatedExpanderTemplate}" Margin="0,0" HorizontalAlignment="Center"
                              Visibility="Collapsed" OverridesDefaultStyle="true" Grid.Column="0"
                              IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                                <ToggleButton x:Name="ExpanderIsExpanderToggleButton" Template="{StaticResource AnimatedExpanderTemplate}"
                              Margin="5,0" HorizontalAlignment="Right" Visibility="Visible" OverridesDefaultStyle="true"
                              Grid.Column="3"
                              IsChecked="{Binding Path=IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                                <StackPanel Grid.Column="2" Orientation="Horizontal" Margin="0,0,10,0">
                                    <FrameworkElement.Resources>
                                        <Style x:Key="SelectionQuickButtonStyle" TargetType="{x:Type ToggleButton}"
                           BasedOn="{StaticResource ChromelessButtonStyle}">
                                            <Setter Property="Control.FontSize" Value="11"/>
                                            <Setter Property="FrameworkElement.VerticalAlignment" Value="Center"/>
                                            <Setter Property="Control.FontFamily" Value="Segoe UI Symbol"/>
                                            <Setter Property="FrameworkElement.Margin" Value="0,0,0,0"/>
                                            <Setter Property="UIElement.Opacity" Value="0.5"/>
                                            <Setter Property="Control.Foreground" Value="White"/>
                                            <Style.Triggers>
                                                <Trigger Property="ToggleButton.IsChecked" Value="True">
                                                    <Setter Property="Control.Foreground" Value="{DynamicResource WhiteBrush}"/>
                                                    <Setter Property="ContentControl.Content" Value=""/>
                                                </Trigger>
                                                <Trigger Property="ToggleButton.IsChecked" Value="False">
                                                    <Setter Property="Control.Foreground" Value="{DynamicResource WhiteBrush}"/>
                                                    <Setter Property="ContentControl.Content" Value=""/>
                                                </Trigger>
                                            </Style.Triggers>
                                        </Style>
                                    </FrameworkElement.Resources>
                                    <ToggleButton ToolTip="Toggle Filters" Style="{StaticResource SelectionQuickButtonStyle}"
                                Visibility="{Binding ElementName=ExpanderIsExpanderToggleButton, Path=IsChecked, Converter={StaticResource BooleanToVisibilityConverter}}"/>
                                </StackPanel>
                                <ContentPresenter Grid.Column="1" Margin="2,0" ContentSource="Header" RecognizesAccessKey="true"/>
                            </Grid>
                        </Border>
                        <Border Name="Content" Opacity="1" BorderBrush="{StaticResource BlackBrush}" BorderThickness="0"
                    CornerRadius="0,0,0,0" Grid.Row="1">
                            <ContentPresenter Margin="0"/>
                        </Border>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Expander.IsExpanded" Value="true">
                            <Setter TargetName="ContentRow" Value="{Binding ElementName=Content, Path=Height}"
                      Property="RowDefinition.Height"/>
                            <Setter TargetName="Border" Value="{StaticResource WhiteBrush}" Property="Border.BorderBrush"/>
                        </Trigger>
                        <Trigger Property="Expander.IsExpanded" Value="false">
                            <Setter TargetName="Border" Property="Border.BorderThickness" Value="0,0,0,0"/>
                            <Setter TargetName="Border" Property="Border.CornerRadius" Value="0"/>
                            <Setter TargetName="Content" Property="UIElement.Visibility" Value="Collapsed"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>