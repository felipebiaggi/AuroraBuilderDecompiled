<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:mah="http://metro.mahapps.com/winfx/xaml/shared"
                    xmlns:controls="http://metro.mahapps.com/winfx/xaml/controls"
                    xmlns:aurora="clr-namespace:Builder.Presentation.Controls"
                    xmlns:iconPacks="http://metro.mahapps.com/winfx/xaml/iconpacks">
    <mah:ThicknessBindingConverter x:Key="ThicknessBindingConverter"/>
    <Duration x:Key="CollapseAnimationDuration">0:0:0.05</Duration>
    <KeyTime x:Key="CollapseAnimationKeyTime">0:0:0.05</KeyTime>
    <Thickness x:Key="ExpanderHeaderThemePadding">4</Thickness>
    <SolidColorBrush x:Key="AuroraExpanderIconPressedBrush" Color="{DynamicResource AuroraGoldColor}"/>
    <Style x:Key="ExpanderBaseHeaderStyle" TargetType="{x:Type ToggleButton}">
        <Setter Property="Control.Background" Value="Transparent"/>
        <Setter Property="Control.BorderBrush" Value="Transparent"/>
        <Setter Property="Control.BorderThickness" Value="0"/>
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="FrameworkElement.Margin" Value="0"/>
        <Setter Property="Control.Padding" Value="{DynamicResource ExpanderHeaderThemePadding}"/>
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
    </Style>
    <Style x:Key="ExpanderDownHeaderStyle" BasedOn="{StaticResource ExpanderBaseHeaderStyle}"
         TargetType="{x:Type ToggleButton}">
        <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}">
                        <Grid Margin="{TemplateBinding Control.Padding}" Background="Transparent" SnapsToDevicePixels="false">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid Margin="3,0,3,0" Visibility="Collapsed">
                                <Path x:Name="Arrow" HorizontalAlignment="Center" VerticalAlignment="Center"
                      Data="M 1,1.5 L 4.5,5 8,1.5 " SnapsToDevicePixels="false"
                      Stroke="{TemplateBinding Control.Foreground}" StrokeThickness="2"/>
                            </Grid>
                            <controls:ContentControlEx x:Name="ToggleContent" Grid.Column="1" Margin="2 0 0 0"
                                         Foreground="{TemplateBinding Control.Foreground}"
                                         HorizontalContentAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                                         VerticalContentAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                                         Content="{TemplateBinding ContentControl.Content}"
                                         ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}"
                                         ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                         ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}"
                                         RecognizesAccessKey="true" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                                         ContentCharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ControlsHelper.ContentCharacterCasing)}"/>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="true"/>
                        <Trigger Property="UIElement.IsMouseOver" Value="true"/>
                        <Trigger Property="ButtonBase.IsPressed" Value="true"/>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style x:Key="RightExpanderDownHeaderStyle" BasedOn="{StaticResource ExpanderDownHeaderStyle}"
         TargetType="{x:Type ToggleButton}">
        <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Center"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type ToggleButton}">
                    <Border Background="{TemplateBinding Control.Background}"
                  BorderBrush="{TemplateBinding Control.BorderBrush}"
                  BorderThickness="{TemplateBinding Control.BorderThickness}">
                        <Grid Margin="{TemplateBinding Control.Padding}" Background="Transparent" SnapsToDevicePixels="true">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="Auto"/>
                                <ColumnDefinition Width="*"/>
                            </Grid.ColumnDefinitions>
                            <Grid Margin="4,0">
                                <iconPacks:PackIconFontAwesome x:Name="Icon" Kind="ChevronDownSolid" Foreground="{TemplateBinding Control.Foreground}"
                                               Margin="0,1,0,0"/>
                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="ToggleButton.IsChecked" Value="true">
                            <Setter TargetName="Icon" Property="iconPacks:PackIconFontAwesome.Kind" Value="ChevronUpSolid"/>
                            <Setter TargetName="Icon" Property="FrameworkElement.Margin" Value="0,0,0,0"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="Icon" Value="{DynamicResource GrayBrush2}" Property="Control.Foreground"/>
                        </Trigger>
                        <Trigger Property="ButtonBase.IsPressed" Value="true">
                            <Setter TargetName="Icon" Value="{DynamicResource AuroraExpanderIconPressedBrush}"
                      Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Storyboard x:Key="MetroExpanderExpandStoryboard">
        <DoubleAnimation Storyboard.TargetName="ExpandSite" Storyboard.TargetProperty="(UIElement.Opacity)" To="1"
                     Duration="{StaticResource CollapseAnimationDuration}"/>
        <DoubleAnimation Storyboard.TargetName="AdditionalContentPresenter" Storyboard.TargetProperty="(UIElement.Opacity)"
                     To="1" Duration="0:0:0.20"/>
        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ExpandSite" Storyboard.TargetProperty="(UIElement.Visibility)">
            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
        </ObjectAnimationUsingKeyFrames>
    </Storyboard>
    <Storyboard x:Key="MetroExpanderCollapseStoryboard">
        <DoubleAnimation Storyboard.TargetName="ExpandSite" Storyboard.TargetProperty="(UIElement.Opacity)" To="0"
                     Duration="0:0:0.20"/>
        <DoubleAnimation Storyboard.TargetName="AdditionalContentPresenter" Storyboard.TargetProperty="(UIElement.Opacity)"
                     To="0" Duration="0:0:0.20"/>
        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="ExpandSite" Storyboard.TargetProperty="(UIElement.Visibility)">
            <DiscreteObjectKeyFrame KeyTime="0:0:0.20" Value="{x:Static Visibility.Collapsed}"/>
        </ObjectAnimationUsingKeyFrames>
    </Storyboard>
    <Storyboard x:Key="FooterExpanderExpandStoryboard">
        <DoubleAnimation Storyboard.TargetName="FooterSite" Storyboard.TargetProperty="(UIElement.Opacity)" To="1"
                     Duration="0:0:0.25"/>
        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="FooterSite" Storyboard.TargetProperty="(UIElement.Visibility)">
            <DiscreteObjectKeyFrame KeyTime="0" Value="{x:Static Visibility.Visible}"/>
        </ObjectAnimationUsingKeyFrames>
    </Storyboard>
    <Storyboard x:Key="FooterExpanderCollapseStoryboard">
        <DoubleAnimation Storyboard.TargetName="FooterSite" Storyboard.TargetProperty="(UIElement.Opacity)" To="0"
                     Duration="0:0:0.25"/>
        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="FooterSite" Storyboard.TargetProperty="(UIElement.Visibility)">
            <DiscreteObjectKeyFrame KeyTime="0:0:0.20" Value="{x:Static Visibility.Collapsed}"/>
        </ObjectAnimationUsingKeyFrames>
    </Storyboard>
    <Style x:Key="AuroraExpanderStyle" TargetType="{x:Type aurora:AuroraExpander}">
        <Setter Property="Control.HorizontalContentAlignment" Value="Stretch"/>
        <Setter Property="Control.VerticalContentAlignment" Value="Stretch"/>
        <Setter Property="Control.Background" Value="{DynamicResource HighlightBrush}"/>
        <Setter Property="Control.BorderBrush" Value="{DynamicResource AccentColorBrush}"/>
        <Setter Property="Control.BorderThickness" Value="1"/>
        <Setter Property="controls:ControlsHelper.HeaderFontWeight" Value="SemiBold"/>
        <Setter Property="controls:ControlsHelper.ContentCharacterCasing" Value="Upper"/>
        <Setter Property="controls:ControlsHelper.HeaderFontSize" Value="{DynamicResource ContentFontSize}"/>
        <Setter Property="controls:ExpanderHelper.HeaderDownStyle" Value="{StaticResource ExpanderDownHeaderStyle}"/>
        <Setter Property="controls:ExpanderHelper.HeaderLeftStyle" Value="{StaticResource ExpanderDownHeaderStyle}"/>
        <Setter Property="controls:ExpanderHelper.HeaderRightStyle"
            Value="{StaticResource ExpanderDownHeaderStyle}"/>
        <Setter Property="controls:ExpanderHelper.HeaderUpStyle" Value="{StaticResource ExpanderDownHeaderStyle}"/>
        <Setter Property="controls:GroupBoxHelper.HeaderForeground"
            Value="{DynamicResource IdealForegroundColorBrush}"/>
        <Setter Property="Control.Foreground" Value="{DynamicResource BlackBrush}"/>
        <Setter Property="Control.Padding" Value="4"/>
        <Setter Property="UIElement.SnapsToDevicePixels" Value="true"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type aurora:AuroraExpander}">
                    <Grid>
                        <Rectangle x:Name="DisabledVisualElement" Fill="{DynamicResource ControlsDisabledBrush}"
                       IsHitTestVisible="false" Opacity="0"/>
                        <DockPanel x:Name="ExpanderRoot">
                            <Border x:Name="HeaderSite" Background="{TemplateBinding Control.Background}"
                      BorderBrush="{TemplateBinding Control.BorderBrush}"
                      BorderThickness="{TemplateBinding Control.BorderThickness}" DockPanel.Dock="Top"
                      SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" UseLayoutRounding="true">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*"/>
                                        <ColumnDefinition Width="Auto"/>
                                        <ColumnDefinition Width="Auto"/>
                                    </Grid.ColumnDefinitions>
                                    <ToggleButton x:Name="ToggleSite" Content="{TemplateBinding HeaderedContentControl.Header}"
                                Margin="{TemplateBinding controls:ControlsHelper.HeaderMargin}"
                                ContentStringFormat="{TemplateBinding HeaderedContentControl.HeaderStringFormat}"
                                ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}"
                                ContentTemplateSelector="{TemplateBinding HeaderedContentControl.HeaderTemplateSelector}"
                                FontSize="{TemplateBinding controls:ControlsHelper.HeaderFontSize}"
                                FontStretch="{TemplateBinding controls:ControlsHelper.HeaderFontStretch}"
                                FontWeight="{TemplateBinding controls:ControlsHelper.HeaderFontWeight}"
                                Style="{StaticResource ExpanderDownHeaderStyle}"
                                Foreground="{TemplateBinding controls:GroupBoxHelper.HeaderForeground}" UseLayoutRounding="false"
                                controls:ControlsHelper.ContentCharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ControlsHelper.ContentCharacterCasing)}"
                                IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}"/>
                                    <ContentPresenter x:Name="AdditionalContentPresenter" Grid.Column="1" Margin="{TemplateBinding Control.Padding}"
                                    Visibility="{TemplateBinding aurora:AuroraExpander.AdditionalHeaderVisibility}"
                                    Content="{TemplateBinding aurora:AuroraExpander.AdditionalHeaderContent}"
                                    VerticalAlignment="Center" Cursor="{TemplateBinding FrameworkElement.Cursor}"
                                    UseLayoutRounding="false">
                                        <FrameworkElement.Resources>
                                            <Style TargetType="{x:Type TextBlock}">
                                                <Setter Property="TextBlock.Foreground" Value="{DynamicResource GrayBrush6}"/>
                                                <Setter Property="TextBlock.FontSize" Value="10"/>
                                                <Setter Property="FrameworkElement.Margin" Value="5,0,0,0"/>
                                            </Style>
                                        </FrameworkElement.Resources>
                                    </ContentPresenter>
                                    <ToggleButton x:Name="ToggleSite2" Grid.Column="2" Content=""
                                ContentStringFormat="{TemplateBinding HeaderedContentControl.HeaderStringFormat}"
                                ContentTemplate="{TemplateBinding HeaderedContentControl.HeaderTemplate}"
                                ContentTemplateSelector="{TemplateBinding HeaderedContentControl.HeaderTemplateSelector}"
                                FontSize="{TemplateBinding controls:ControlsHelper.HeaderFontSize}"
                                FontStretch="{TemplateBinding controls:ControlsHelper.HeaderFontStretch}"
                                FontWeight="{TemplateBinding controls:ControlsHelper.HeaderFontWeight}"
                                Style="{StaticResource RightExpanderDownHeaderStyle}" UseLayoutRounding="false"
                                controls:ControlsHelper.ContentCharacterCasing="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ControlsHelper.ContentCharacterCasing)}"
                                IsChecked="{Binding IsExpanded, Mode=TwoWay, RelativeSource={RelativeSource TemplatedParent}}">
                                        <Control.Foreground>
                                            <MultiBinding Converter="{x:Static mah:BackgroundToForegroundConverter.Instance}">
                                                <Binding Mode="OneWay" Path="Background" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                <Binding Mode="OneWay" Path="(controls:GroupBoxHelper.HeaderForeground)"
                                 RelativeSource="{RelativeSource TemplatedParent}"/>
                                            </MultiBinding>
                                        </Control.Foreground>
                                    </ToggleButton>
                                </Grid>
                            </Border>
                            <Border x:Name="ExpandSite" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                      VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" Background="Transparent"
                      BorderBrush="{TemplateBinding Control.BorderBrush}" DockPanel.Dock="Top" Focusable="false"
                      Visibility="Collapsed" SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"
                      UseLayoutRounding="true"
                      BorderThickness="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness, Converter={StaticResource ThicknessBindingConverter}, ConverterParameter={x:Static mah:ThicknessSideType.Top}}">
                                <ContentPresenter Margin="{TemplateBinding Control.Padding}" Content="{TemplateBinding ContentControl.Content}"
                                  ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                  Cursor="{TemplateBinding FrameworkElement.Cursor}" UseLayoutRounding="false"/>
                            </Border>
                            <Border x:Name="FooterSite" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}"
                      VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}"
                      Background="{DynamicResource WhiteBrush}" BorderBrush="{TemplateBinding Control.BorderBrush}"
                      DockPanel.Dock="Bottom" Focusable="false" Visibility="Collapsed"
                      SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}" UseLayoutRounding="true"
                      BorderThickness="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness, Converter={StaticResource ThicknessBindingConverter}, ConverterParameter={x:Static mah:ThicknessSideType.Top}}">
                                <ContentPresenter Margin="{TemplateBinding Control.Padding}"
                                  Content="{TemplateBinding aurora:AuroraExpander.FooterContent}"
                                  Cursor="{TemplateBinding FrameworkElement.Cursor}" UseLayoutRounding="false"/>
                            </Border>
                        </DockPanel>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver"/>
                                <VisualState x:Name="Disabled">
                                    <Storyboard>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="DisabledVisualElement" Storyboard.TargetProperty="Opacity">
                                            <SplineDoubleKeyFrame KeyTime="0" Value="0.7"/>
                                        </DoubleAnimationUsingKeyFrames>
                                        <DoubleAnimationUsingKeyFrames Storyboard.TargetName="ExpanderRoot" Storyboard.TargetProperty="(UIElement.Opacity)">
                                            <EasingDoubleKeyFrame KeyTime="0" Value="0.3"/>
                                        </DoubleAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="Expander.IsExpanded" Value="true">
                            <Setter TargetName="ExpandSite" Property="UIElement.Visibility" Value="Visible"/>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource MetroExpanderExpandStoryboard}"/>
                            </TriggerBase.EnterActions>
                            <TriggerBase.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource MetroExpanderCollapseStoryboard}"/>
                            </TriggerBase.ExitActions>
                        </Trigger>
                        <Trigger Property="aurora:AuroraExpander.FooterVisibility" Value="Visible">
                            <Setter TargetName="FooterSite" Property="UIElement.Visibility" Value="Visible"/>
                            <TriggerBase.EnterActions>
                                <BeginStoryboard Storyboard="{StaticResource FooterExpanderExpandStoryboard}"/>
                            </TriggerBase.EnterActions>
                            <TriggerBase.ExitActions>
                                <BeginStoryboard Storyboard="{StaticResource FooterExpanderCollapseStoryboard}"/>
                            </TriggerBase.ExitActions>
                        </Trigger>
                        <Trigger Property="Expander.ExpandDirection" Value="Right">
                            <Setter TargetName="ExpandSite"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness, Converter={StaticResource ThicknessBindingConverter}, ConverterParameter={x:Static mah:ThicknessSideType.Left}}"
                      Property="Border.BorderThickness"/>
                            <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Right"/>
                            <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Left"/>
                            <Setter TargetName="ToggleSite"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ExpanderHelper.HeaderRightStyle)}"
                      Property="FrameworkElement.Style"/>
                        </Trigger>
                        <Trigger Property="Expander.ExpandDirection" Value="Up">
                            <Setter TargetName="ExpandSite"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness, Converter={StaticResource ThicknessBindingConverter}, ConverterParameter={x:Static mah:ThicknessSideType.Bottom}}"
                      Property="Border.BorderThickness"/>
                            <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Top"/>
                            <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Bottom"/>
                            <Setter TargetName="ToggleSite"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ExpanderHelper.HeaderUpStyle)}"
                      Property="FrameworkElement.Style"/>
                        </Trigger>
                        <Trigger Property="Expander.ExpandDirection" Value="Left">
                            <Setter TargetName="ExpandSite"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderThickness, Converter={StaticResource ThicknessBindingConverter}, ConverterParameter={x:Static mah:ThicknessSideType.Right}}"
                      Property="Border.BorderThickness"/>
                            <Setter TargetName="ExpandSite" Property="DockPanel.Dock" Value="Left"/>
                            <Setter TargetName="HeaderSite" Property="DockPanel.Dock" Value="Right"/>
                            <Setter TargetName="ToggleSite"
                      Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(controls:ExpanderHelper.HeaderLeftStyle)}"
                      Property="FrameworkElement.Style"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsEnabled" Value="false">
                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    <Style TargetType="{x:Type aurora:AuroraExpander}" BasedOn="{StaticResource AuroraExpanderStyle}"/>
    <Style x:Key="FlyoutExpanderStyle" TargetType="{x:Type aurora:AuroraExpander}"
         BasedOn="{StaticResource AuroraExpanderStyle}">
        <Setter Property="controls:GroupBoxHelper.HeaderForeground" Value="{DynamicResource GrayBrush6}"/>
        <Setter Property="Control.BorderThickness" Value="0"/>
    </Style>
</ResourceDictionary>